name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.2.8, v1.0.0, etc.
  workflow_dispatch:  # Allows manual triggering

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other builds if one fails
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: prayerway-linux-x86_64
            use_cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
            name: prayerway-linux-aarch64
            use_cross: true
          - target: x86_64-pc-windows-gnu
            os: ubuntu-22.04
            name: prayerway-windows-x86_64.exe
            use_cross: true
          - target: x86_64-apple-darwin
            os: macos-13
            name: prayerway-macos-x86_64
            use_cross: false
          - target: aarch64-apple-darwin
            os: macos-14
            name: prayerway-macos-aarch64
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Install cross (if needed)
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary (native)
        if: matrix.use_cross == false
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Build binary (cross-compiled)
        if: matrix.use_cross == true
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/prayerway.exe artifacts/${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/prayerway artifacts/${{ matrix.name }}
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: artifacts/${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              cp "$dir"* release-assets/
            fi
          done
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## PrayerWay ${{ steps.version.outputs.VERSION }}
          
          ### Features
          - Islamic prayer times with customizable calculation methods
          - Support for multiple cities and countries
          - Arabic and English language support
          - 12-hour and 24-hour time formats
          - Hijri date display
          - Notification system with custom audio support
          
          ### Downloads
          Choose the appropriate binary for your system:
          - **Linux x86_64**: `prayerway-linux-x86_64`
          - **Linux ARM64**: `prayerway-linux-aarch64`  
          - **Windows x86_64**: `prayerway-windows-x86_64.exe`
          - **macOS x86_64**: `prayerway-macos-x86_64`
          - **macOS ARM64** (Apple Silicon): `prayerway-macos-aarch64`
          
          ### Usage
          ```bash
          prayerway --city "Cairo" --country "Egypt" --method "4"
          ```
          
          ### Installation
          1. Download the appropriate binary for your system
          2. Make it executable: `chmod +x prayerway-*`
          3. Move to your PATH: `sudo mv prayerway-* /usr/local/bin/prayerway`
          
          For more information, visit the [project repository](https://github.com/${{ github.repository }}).
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: PrayerWay ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          make_latest: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
